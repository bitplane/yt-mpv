#!/usr/bin/env bash
# Launcher for x-yt-ulp:// URL
# plays video with mpv, then upload to Internet Archive.

# Extract the URL from arguments (should be one URL)
RAW_URL="$1"
if [[ -z "$RAW_URL" ]]; then
    echo "No URL provided to launcher." >&2
    exit 1
fi

# Convert x-yt-ulp custom scheme to regular http/https URL
# x-yt-ulp -> http, x-yt-ulps -> https
if [[ "$RAW_URL" == x-yt-ulps:* ]]; then
    URL="${RAW_URL/x-yt-ulps:/https:}"
elif [[ "$RAW_URL" == x-yt-ulp:* ]]; then
    URL="${RAW_URL/x-yt-ulp:/http:}"
else
    URL="$RAW_URL"
fi

# Ensure mpv is installed
if ! command -v mpv &> /dev/null; then
    notify-send "YouTube ULP: mpv not found." 2>/dev/null
    echo "Error: mpv is not installed." >&2
    exit 1
fi

# Activate the Python virtual environment for yt-dlp and internetarchive
VENV_DIR="$HOME/.local/share/yt-ulp/venv"
if [[ -f "$VENV_DIR/bin/activate" ]]; then
    # shellcheck source=/dev/null
    source "$VENV_DIR/bin/activate"
else
    echo "$VENV_DIR missing: run install.sh or create a venv there" >&2
    exit 1
fi

# Upgrade yt-dlp to latest (to avoid any breakage with site changes)
uv install -U yt-dlp &> /dev/null

# Play the video with mpv (this will stream the video via yt-dlp, without ads)
mpv --ytdl=no "$URL" \
    --term-status-msg="Playing: ${URL}" 2>/dev/null

# Once mpv closes, proceed to download and archive
echo "Playback finished, downloading the video for archiving..."

# Create a directory for downloads if not exists
DL_DIR="$HOME/.local/share/yt-ulp"
mkdir -p "$DL_DIR"
cd "$DL_DIR"

# Use yt-dlp to download the full video with metadata
# Save video as yt-ulp-<extractor>-<id>.<ext> and write info JSON
yt-dlp -f "bestvideo*+bestaudio/best" --merge-output-format mp4 \
       --write-info-json -o "yt-ulp-%(extractor)s-%(id)s.%(ext)s" \
       "$URL"

# Find the downloaded file and its info JSON
# (yt-dlp will name them based on the template above)
INFO_FILE="$(find . -maxdepth 1 -type f -name 'yt-ulp-*-*.info.json' -print -quit)"
VIDEO_FILE="$(echo "$INFO_FILE" | sed -e 's/\.info\.json$//')"

if [[ -z "$INFO_FILE" || -z "$VIDEO_FILE" || ! -f "$VIDEO_FILE" ]]; then
    echo "Download failed or video file not found." >&2
    notify-send "YouTube ULP: Download failed" 2>/dev/null
    deactivate
    exit 1
fi

# Generate a unique Archive.org identifier for this video
# Use a hash of the URL (SHA1, first 8 chars) to avoid collisions
VID_HASH=$(printf "%s" "$URL" | sha1sum | cut -c1-8)
ARCHIVE_ID="yt-ulp-$(whoami)-${VID_HASH}"

# Use Python (internetarchive library) to upload to Archive.org
python3 - <<EOF
import json, sys, os
import internetarchive

info_path = "$INFO_FILE"
video_path = "$VIDEO_FILE"
identifier = "$ARCHIVE_ID"

# Load metadata from yt-dlp's info.json
with open(info_path, "r") as f:
    data = json.load(f)
title = data.get("title", "Untitled Video")
description = data.get("description") or ""
tags = data.get("tags") or data.get("categories") or []
creator = data.get("uploader") or data.get("channel") or ""
source = data.get("webpage_url") or "$URL"

# Check if item already exists on Archive.org
exists = False
try:
    search = internetarchive.search_items(f'identifier:{identifier}', max=1)
    for _ in search:
        exists = True
        break
except Exception as e:
    # If search fails (e.g., no internet), proceed to attempt upload
    exists = False

if exists:
    print(f"Archive item {identifier} already exists. Skipping upload.")
    # Optionally, send a notification
    os.system('notify-send "YouTube ULP: Already archived on IA (skip upload)"')
    sys.exit(0)

# If not exists, upload the video
meta = {
    "title": title,
    "description": description,
    "creator": creator,
    "subject": tags,
    "source": source,
    "mediatype": "movies",
    "collection": "opensource_movies"
}

print(f"Uploading to archive.org as {identifier} ...")
# Perform the upload
try:
    response = internetarchive.upload(
                   identifier,
                   {os.path.basename(video_path): video_path},
                   metadata=meta)
    # The upload returns a list of results for each file
    success = all(r.status_code == 200 for r in response)
except Exception as e:
    success = False

if success:
    print("Upload succeeded.")
    os.system('notify-send "YouTube ULP: Upload succeeded: ${identifier}"')
else:
    print("Upload failed or partially failed.")
    os.system('notify-send "YouTube ULP: Upload to IA failed"')
EOF

# Deactivate the virtual environment
deactivate

# (Optional) We could clean up or move the files, but for now we
# leave the video in $DL_DIR for caching.
